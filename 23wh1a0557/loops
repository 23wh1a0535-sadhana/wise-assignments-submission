{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNyTkm6DNXv45IW31McXxcr"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"LqsMDfwJI7jZ"},"outputs":[],"source":["import random\n","\n","number_to_guess = random.randint(1, 9)\n","guessed = False\n","\n","while not guessed:\n"," guess = int(input(\"Guess a number between 1 and 9: \"))\n","   if guess == number_to_guess:\n","        print(\"Congratulations! You guessed the correct number.\")\n","        guessed = True\n","    else:\n","        print(\"Try again.\")"]},{"cell_type":"code","source":["\n","for i in range(7):\n","    if i != 3 and i != 6:\n","        print(i)"],"metadata":{"id":"zh8htodsI9oD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["string = input(\"Enter a string: \")\n","letters = sum(c.isalpha() for c in string)\n","digits = sum(c.isdigit() for c in string)\n","print(f\"Letters: {letters}, Digits: {digits}\")"],"metadata":{"id":"MdsIvGG3I9s7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","def factorial(n):\n","    if n == 0:\n","        return 1\n","    return n * factorial(n - 1)\n","\n","num = int(input(\"Enter a number: \"))\n","print(\"Factorial:\", factorial(num))"],"metadata":{"id":"pnk0j2mRI9vN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","import random\n","\n","initial_number = 25\n","progression = [initial_number]\n","\n","for _ in range(4):  # Adjust the range to change the number of terms in the progression\n","    initial_number += random.randint(1, 10)\n","    progression.append(initial_number)\n","\n","print(\"Random Arithmetic Progression:\",)"],"metadata":{"id":"kqYcCWgxI9xm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","word = input(\"Enter a word: \")\n","reversed_word = word[::-1]\n","print(\"Reversed word:\", reversed_word)"],"metadata":{"id":"L64rWyWVI9z-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","string = input(\"Enter a string: \")\n","digits = sum(c.isdigit() for c in string)\n","letters = sum(c.isalpha() for c in string)\n","print(f\"Number of digits: {digits}\")\n","print(f\"Number of letters: {letters}\")"],"metadata":{"id":"EhliJYkhI92g"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#10\n","alphabet = input(\"Enter an alphabet: \").lower()\n","if alphabet.isalpha() and len(alphabet) == 1:\n","    if alphabet in 'aeiou':\n","        print(f\"{alphabet} is a vowel.\")\n","    else:\n","        print(f\"{alphabet} is a consonant.\")\n","else:\n","    print(\"Please enter a single alphabet character.\")"],"metadata":{"id":"EmrBjElDI944"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","month_name = input(\"Enter month name: \").lower()\n","days_in_month = {\n","    \"january\": 31, \"february\": 28, \"march\": 31, \"april\": 30,\n","    \"may\": 31, \"june\": 30, \"july\": 31, \"august\": 31,\n","    \"september\": 30, \"october\": 31, \"november\": 30, \"december\": 31\n","}\n","if month_name in days_in_month:\n","    print(f\"Number of days in {month_name.capitalize()}: {days_in_month[month_name]}\")\n","else:\n","    print(\"Invalid month name entered.\")"],"metadata":{"id":"kG6sFf3KI97D"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["month = input(\"Input the month (e.g. January, February etc.): \")\n","day = int(input(\"Input the day: \"))\n","\n","if month in ('January', 'February', 'March'):\n","\tseason = 'winter'\n","elif month in ('April', 'May', 'June'):\n","\tseason = 'spring'\n","elif month in ('July', 'August', 'September'):\n","\tseason = 'summer'\n","else:\n","\tseason = 'autumn'\n","\n","if (month == 'March') and (day > 19):\n","\tseason = 'spring'\n","elif (month == 'June') and (day > 20):\n","\tseason = 'summer'\n","elif (month == 'September') and (day > 21):\n","\tseason = 'autumn'\n","elif (month == 'December') and (day > 20):\n","\tseason = 'winter'\n","\n","print(\"SeasonÂ is\",season)"],"metadata":{"id":"ymu6NkzsI99t"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def is_leap_year(year):\n","    return (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)\n","\n","def get_next_day(year, month, day):\n","    days_in_month = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n","\n","    if is_leap_year(year):\n","        days_in_month[2] = 29\n","\n","    if day < days_in_month[month]:\n","        return year, month, day + 1\n","    else:\n","        if month == 12:\n","            return year + 1, 1, 1\n","        else:\n","            return year, month + 1, 1\n","\n","# Input date\n","year = int(input(\"Enter year: \"))\n","month = int(input(\"Enter month (1-12): \"))\n","day = int(input(\"Enter day (1-31): \"))\n","\n","next_year, next_month, next_day = get_next_day(year, month, day)\n","print(f\"The next day is: {next_year}-{next_month:02d}-{next_day:02d}\")\n"],"metadata":{"id":"j6_VB-OQI9_8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["num = int(input(\"enter the num of which the user wants to print multiplication table:\"))\n","print(\"the multiplication table of:\",num)\n","for count in range(1,11)\n","print(num,'x','count','=','num*count')"],"metadata":{"id":"3zxpFdUIMOmH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["i = 10\n","while(i>=1):\n","  print(i)\n","  i = i-1"],"metadata":{"id":"7PWjGZrLMOot"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"9UNvov1tMOrJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"oJDT2NdzMOtz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"_Ryo-SOuMOxY"},"execution_count":null,"outputs":[]}]}